1 、& 运算符
&是二元运算符，它以特定的方式的方式组合操作数中对应的位 如果对应的位都为1，那么结果就是1， 如果任意一个位是0 则结果就是0
1 & 3的结果为1
来看看它的怎么运行的：
1的二进制表示为 0 0 0 0 0 0 1
3的二进制表示为 0 0 0 0 0 1 1
根据 & 的规则 得到的结果为 0 0 0 0 0 0 0 1,十进制表示就是1
只要任何一位是0 &运算的结果就是 0，所以可以用&把某个变量不必要的位设为0, 比如某个变量的二进制表示为 0 1 0 0 1 0 0 1, 我想保留低4位，消除高4位 用 & 0x0F就可以了（注：0x0F为16进制表示法，对应的二进制为 0 0 0 0 1 1 1 1），这个特性在编码中使用很广泛。

2 、| 运算符
| 跟 & 的区别在于 如果对应的位中任一个操作数为1 那么结果就是1
1 | 3 的结果为3
3、 ^ 运算符
^运算符跟 | 类似，但有一点不同的是 如果两个操作位都为1的话，结果产生0
0 1 0 0 0 0 0 1
0 1 0 1 1 0 1 0
产生 0 0 0 1 1 0 1 1
4 、~ 运算符
~是对位求反 1变0， 0变1
5 、移位运算符移位运算符把位按指定的值向左或向右移动
<< 向左移动 而 >> 向右移动，超过的位将丢失，而空出的位则补0
如 0 1 0 0 0 0 1 1(十进制67) 向左移动两位67<<2将变成
 0 0 0 0 1 1 0 0 （十进制12）当然如果你用java代码写，由于是32位，不会溢出，结果是268
向右移动两位67>>2则是
0 0 0 1 0 0 0 0(十进制16)
————————————————
版权声明：本文为CSDN博主「我的世界+1」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/zhaoyunfei1/article/details/95312550